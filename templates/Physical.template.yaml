AWSTemplateFormatVersion: '2010-09-09'
Description: 'IMC Backend Quickstart -- Physical (Please do not remove)'
Parameters:
  EdgeInstanceGreengrassInstanceProfile:
    Type: String
    Description: The instance profile for the EC2 instance running Greengrass 
  GreengrassInstanceType:
    Type: String
    Default: Instance type for for the EC2 instance running Greengrass 
  IoTEndpoint: 
    Type: String
    Description: IoT Endpoint, retrieved from custom resource lambda in workload template
  EdgeDeviceID:
    Type: String
    Description: Name for the edge device. 
  EC2AMI:
    Description: The AMI that the EC2 instances will be using
    Type: AWS::EC2::Image::Id
  IgnitionInstanceType:
    Description: Amazon EC2 instance type for the EC2 instances.
    Type: String
  EC2KeyPairName:
    Description: Name of an existing EC2 key pair. All instances will launch with
      this key pair.
    Type: AWS::EC2::KeyPair::KeyName
  EC2Subnet:
    ConstraintDescription: Must be a valid subnet ID 
    Description: This is the subnit ID where the EC2(s) will be deployed
    Type: AWS::EC2::Subnet::Id
  DeploymentType:
    Description: Type of edge deployment
    Type: String
  DeploymentOption:
    Description: They further defined deployment type
      --- Option1 (or OPC-UA Path via SiteWise)
      --- Option 2a (MQTT Ignition --> Iot Core)
      --- Option 2b (MQTT Ignition --> Greengrass --> Iot Core)
    Type: String
  EIIgnitionInstanceProfile:
    Description: Profile for the ignition instance that is running at the edge
    Type: String
  EdgeSecGroupResourceGroupID:
    Description: This is the group id for the security group for the edge instance
    Type: 'List<AWS::EC2::SecurityGroup::Id>'
  DeviceBucketRes:
    Description: Information for the device bucket 
    Type: String
  QSS3BucketRegion: 
    Description: Region for the Quickstart bucket
    Type: String
  QSS3BucketName:
    Description: Name of the Quickstart Bucket
    Type: String
  QSS3KeyPrefix: 
    Description: Quickstart key prefix for S3 Quickstart bucket
    Type: String
  VpcID:
    Description: ID for the VpcID
    Type: String
  LambdaZipsBucket:
    Description: Bucket location of the project zip files
    Type: String
  LambdaExecRole:
    Description: IAM Role policy for project lambdas
    Type: String
  IMCBucketArn:
    Description: ARN of the projects IMC Bucket
    Type: String
  KinesisDelRoleArn:
    Description: ARN of the IAM role for Kinesis Delivery
    Type: String
  IoTTopicRuleRoleArn:
    Description: ARN for the projects IoT Topic rule 
    Type: String
  AMCIncomingRes:
    Description: Reference to the Assest Model Incoming Resource
    Type: String
  AMCConvertLambdaResArn:
    Description: ARN for the Asset Model Converter Lambda
    Type: String
  AMCIncomingResArn:
    Description: ARN for the Assest Model Incoming Resource
    Type: String
  RestAPIId:
    Description: ID for the Rest API
    Type: String

Resources:
  mqttProcessLambda:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: nodejs12.x
      Role: !Ref LambdaExecRole
      Handler: mqttdataprocess.handler
      Timeout: 120
      Code:
        S3Bucket: !Ref 'LambdaZipsBucket'
        S3Key: !Sub '${QSS3KeyPrefix}functions/packages/MQTTDataProcess/mqttdataprocess.js.zip'
      Description: Invoke a function during stack creation.

  KinesisDeliveryStreamMQTT:
    Type: AWS::KinesisFirehose::DeliveryStream
    Properties:
      ExtendedS3DestinationConfiguration:
        BucketARN: !Ref IMCBucketArn
        BufferingHints:
          IntervalInSeconds: '60'
          SizeInMBs: '50'
        CompressionFormat: UNCOMPRESSED
        Prefix: mqtt/
        ProcessingConfiguration:
          Enabled: 'true'
          Processors:
            - Parameters:
                - ParameterName: LambdaArn
                  ParameterValue: !GetAtt mqttProcessLambda.Arn 
              Type: Lambda
        RoleARN: !Ref KinesisDelRoleArn

  DeviceDataRuleMQTT:
    Type: AWS::IoT::TopicRule
    Properties:
      TopicRulePayload:
        RuleDisabled: false
        Sql: SELECT * FROM 'spBv1.0/AWS Smart Factory/DDATA/#'
        Actions:
          - Firehose:
              DeliveryStreamName: !Ref KinesisDeliveryStreamMQTT
              RoleArn: !Ref IoTTopicRuleRoleArn
            
  MQTTLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt mqttProcessLambda.Arn
      Action: lambda:InvokeFunction
      Principal: firehose.amazonaws.com
      SourceArn: !GetAtt KinesisDeliveryStreamMQTT.Arn
      
  AMCIncomingNotificationsResource:
    Type: Custom::S3BucketNotifications
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - BucketNotificationsHandlerResource
          - Arn
      BucketName: !Ref AMCIncomingRes 
      NotificationConfiguration:
        LambdaFunctionConfigurations:
          - Events:
              - s3:ObjectCreated:*
            LambdaFunctionArn: !Ref AMCConvertLambdaResArn
    DependsOn:
      - AssetModelConverterLambdaAllowBucketNotificationsFromVirtualOption1AMCIncoming

  AssetModelConverterLambdaAllowBucketNotificationsFromVirtualOption1AMCIncoming:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref AMCConvertLambdaResArn
      Principal: s3.amazonaws.com
      SourceAccount: !Ref "AWS::AccountId"
      SourceArn: !Ref AMCIncomingResArn

  BucketNotificationsHandlerRoleResource:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  BucketNotificationsHandlerRoleDefaultPolicyResource:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: s3:PutBucketNotification
            Effect: Allow
            Resource: "*"
        Version: "2012-10-17"
      PolicyName: BucketNotificationsHandlerRoleDefaultPolicyResource
      Roles:
        - Ref: BucketNotificationsHandlerRoleResource

  BucketNotificationsHandlerResource:
    Type: AWS::Lambda::Function
    Properties:
      Description: AWS CloudFormation handler for "Custom::S3BucketNotifications" resources (@aws-cdk/aws-s3)
      Code:
        ZipFile: >-
          exports.handler = (event, context) => {
              // eslint-disable-next-line @typescript-eslint/no-require-imports, import/no-extraneous-dependencies
              const s3 = new (require('aws-sdk').S3)();
              // eslint-disable-next-line @typescript-eslint/no-require-imports
              const https = require('https');
              // eslint-disable-next-line @typescript-eslint/no-require-imports
              const url = require('url');
              log(JSON.stringify(event, undefined, 2));
              const props = event.ResourceProperties;
              if (event.RequestType === 'Delete') {
                  props.NotificationConfiguration = {}; // this is how you clean out notifications
              }
              const req = {
                  Bucket: props.BucketName,
                  NotificationConfiguration: props.NotificationConfiguration,
              };
              return s3.putBucketNotificationConfiguration(req, (err, data) => {
                  log({ err, data });
                  if (err) {
                      return submitResponse('FAILED', err.message + `\nMore information in CloudWatch Log Stream: ${context.logStreamName}`);
                  }
                  else {
                      return submitResponse('SUCCESS');
                  }
              });
              function log(obj) {
                  console.error(event.RequestId, event.StackId, event.LogicalResourceId, obj);
              }
              // tslint:disable-next-line:max-line-length
              // adapted from https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lambda-function-code.html#cfn-lambda-function-code-cfnresponsemodule
              // to allow sending an error messge as a reason.
              function submitResponse(responseStatus, reason) {
                  const responseBody = JSON.stringify({
                      Status: responseStatus,
                      Reason: reason || 'See the details in CloudWatch Log Stream: ' + context.logStreamName,
                      PhysicalResourceId: event.PhysicalResourceId || event.LogicalResourceId,
                      StackId: event.StackId,
                      RequestId: event.RequestId,
                      LogicalResourceId: event.LogicalResourceId,
                      NoEcho: false,
                  });
                  log({ responseBody });
                  const parsedUrl = url.parse(event.ResponseURL);
                  const options = {
                      hostname: parsedUrl.hostname,
                      port: 443,
                      path: parsedUrl.path,
                      method: 'PUT',
                      headers: {
                          'content-type': '',
                          'content-length': responseBody.length,
                      },
                  };
                  const request = https.request(options, (r) => {
                      log({ statusCode: r.statusCode, statusMessage: r.statusMessage });
                      context.done();
                  });
                  request.on('error', (error) => {
                      log({ sendError: error });
                      context.done();
                  });
                  request.write(responseBody);
                  request.end();
              }
          };
      Handler: index.handler
      Role:
        Fn::GetAtt:
          - BucketNotificationsHandlerRoleResource
          - Arn
      Runtime: nodejs10.x
      Timeout: 300
    DependsOn:
      - BucketNotificationsHandlerRoleDefaultPolicyResource
      - BucketNotificationsHandlerRoleResource

Outputs: 
  DependenciesBucket: 
    Description: S3 bucket where all the lambda functions and script dependencies for the stack live after deployemnt
    Value: 
      Ref: LambdaZipsBucket
  BootupScriptGreenfieldOption1:
    Description: Location of the bootup script for the physical device for Greenfield Option 1 deployments
    Value: 
      Fn::Sub: ${QSS3KeyPrefix}scripts/physical-greenfield-option1.sh
  BootupScriptGreenfieldOption2a:
    Description: Location of the bootup script for the physical device for Greenfield Option 2a deployments 
    Value: 
      Fn::Sub: ${QSS3KeyPrefix}scripts/physical-greenfield-option2a.sh
  BootupScriptGreenfieldOption2b:
    Description: Location of the bootup script for the physical device for Greenfield Option 2b deployemnts
    Value: 
      Fn::Sub: ${QSS3KeyPrefix}scripts/physical-greenfield-option2b.sh
  BootupScriptBrownfieldAllOptions:
    Description: Location of the bootup script for the physical device for all Brownfield deployments
    Value: 
      Fn::Sub: ${QSS3KeyPrefix}scripts/physical-brownfield-all-options.sh
  DeviceBucket: 
    Description: Bucket name for the device certificates 
    Value: 
      Ref: DeviceBucketRes
  DeviceKeyGreengrass: 
    Description: Key name for the greengrass device certificates 
    Value: 
      Fn::Sub: ${EdgeDeviceID}/${EdgeDeviceID}Core.tar.gz
  DeviceKeyAwareDevice: 
    Description: Key name for the greengrass aware device certificates 
    Value: 
      Fn::Sub: ${EdgeDeviceID}/${EdgeDeviceID}Device.tar.gz
  RestAPIId: 
    Description: Character hash for the Greengrass Deployment API
    Value: 
      Ref: RestAPIId
  Region: 
    Description: Region of CloudFormation deployment
    Value:
      Ref: AWS::Region
  EdgeDeviceID: 
    Description: Name of the Greengrass group
    Value: 
      Ref: EdgeDeviceID
  IoTEndpoint:
    Description: IoT Endpoint for the account being deployed into
    Value: 
      Ref: IoTEndpoint
  FullScriptParamsGreenfield1and2a:
    Description: Full Script Params Greenfield Option 1, 2a 
    Value:
      !Join
        - ' '
        - - './physical-greenfield-option1.sh'
          - !Ref DeviceBucketRes
          - Fn::Sub: ${EdgeDeviceID}/${EdgeDeviceID}Core.tar.gz
          - !Ref RestAPIId
          - !Ref AWS::Region
          - !Ref EdgeDeviceID
          - '[Hardware-IP]'
          - Fn::Sub: ${EdgeDeviceID}/${EdgeDeviceID}Device.tar.gz
          - !Ref IoTEndpoint
  FullScriptParamsGreenfield2b:
    Description: Full Script Params Greenfield Option 1, 2a 
    Value:
      !Join
        - ' '
        - - './physical-greenfield-option1.sh'
          - !Ref DeviceBucketRes
          - Fn::Sub: ${EdgeDeviceID}/${EdgeDeviceID}Core.tar.gz
          - !Ref RestAPIId
          - !Ref AWS::Region
          - !Ref EdgeDeviceID
          - '[Hardware-IP]'
          - Fn::Sub: ${EdgeDeviceID}/${EdgeDeviceID}Device.tar.gz
  FullScriptParamsBrownField:
    Description: Full Script Params Brownfield All Options
    Value:
      !Join
        - ' '
        - - './physical-brownfield-all-options.sh'
          - !Ref DeviceBucketRes
          - Fn::Sub: ${EdgeDeviceID}/${EdgeDeviceID}Core.tar.gz
          - !Ref RestAPIId
          - !Ref AWS::Region
          - !Ref EdgeDeviceID